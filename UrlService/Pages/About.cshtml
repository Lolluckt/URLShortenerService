@* OLD Realization, after Angular this page is not used anymore, but it is still in the project for reference. *@


@page
@{
    Layout = "_Layout";
}

<style>
    .about-section {
        min-height: 80vh;
        background: linear-gradient(to right, #ff5894, #ff0080);
        color: #fff;
        padding: 2rem;
    }
    .about-content {
        background-color: rgba(255, 255, 255, 0.1);
        padding: 1rem;
        border-radius: 5px;
        max-width: 600px;
        margin-bottom: 1rem;
    }
    .edit-block {
        margin-top: 1.5rem;
    }
    textarea {
        width: 100%;
        height: 120px;
        margin-bottom: 0.5rem;
    }
</style>

<div class="about-section">
    <h1>About</h1>
    <div id="aboutView" class="about-content">
        Загрузка описания...
    </div>

    
    <div id="editBlock" class="about-content edit-block" style="display:none;">
        <h3>Редактировать описание (Admin)</h3>
        <textarea id="aboutTextarea"></textarea>
        <button id="saveBtn">Сохранить</button>
    </div>
</div>

@section Scripts {
    <script>

        const token = localStorage.getItem('jwtToken') || '';

        function parseJwt(token) {
            if (!token) return null;

            const parts = token.split('.');
            if (parts.length !== 3) return null;

            const base64Url = parts[1]; // payload
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            try {
                const jsonPayload = decodeURIComponent(
                    atob(base64).split('')
                      .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
                      .join('')
                );
                return JSON.parse(jsonPayload);
            } catch {
                return null;
            }
        }
        let tokenPayload = parseJwt(token);
        let isAdmin = false;

        if (tokenPayload && tokenPayload.role === 'Admin') {
            isAdmin = true;
        }
        fetch('/api/About', {
            method: 'GET'
        })
        .then(resp => {
            if (!resp.ok) {
                throw new Error('Ошибка при загрузке About: ' + resp.statusText);
            }
            return resp.json();
        })
        .then(aboutData => {
            const aboutView = document.getElementById('aboutView');
            aboutView.textContent = aboutData.content || 'Описания пока нет.';
            if (isAdmin) {
                document.getElementById('editBlock').style.display = 'block';
                document.getElementById('aboutTextarea').value = aboutData.content || '';
            }
        })
        .catch(err => {
            console.error(err);
            document.getElementById('aboutView').textContent = 'Ошибка загрузки About.';
        });

        const saveBtn = document.getElementById('saveBtn');
        saveBtn.addEventListener('click', () => {
            const newContent = document.getElementById('aboutTextarea').value.trim();
            const bodyData = { content: newContent };

            fetch('/api/About', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token  
                },
                body: JSON.stringify(bodyData)
            })
            .then(resp => {
                if (!resp.ok) {
                    if (resp.status === 401) {
                        throw new Error('Вы не авторизованы.');
                    } else if (resp.status === 403) {
                        throw new Error('Недостаточно прав.');
                    }
                    throw new Error('Ошибка сохранения: ' + resp.statusText);
                }
                alert('Изменения сохранены!');
                location.reload();
            })
            .catch(err => {
                alert(err.message);
            });
        });
    </script>
}
